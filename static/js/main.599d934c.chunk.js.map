{"version":3,"sources":["types/FilterType.ts","components/TodoListItem/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","constants.ts","App.tsx","helpers.ts","index.tsx"],"names":["FilterType","TodoListItem","todo","onSelect","selectedTodo","id","title","completed","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","onSearch","query","onTypeChange","onReset","defaultValue","All","onChange","Object","values","value","placeholder","Boolean","style","pointerEvents","Loader","get","url","fetch","catch","error","then","res","json","data","delay","Promise","resolve","setTimeout","TodoModal","onClose","useState","isUserLoading","setIsUserLoading","currentUser","setCurrentUser","useEffect","userId","user","finally","href","email","name","DEFAULT_FILTER","filterType","App","setTodos","setSelectedTodo","isTodosLoading","setIsTodosLoading","filterOptions","setFilterOptions","visibleTodos","useMemo","todoToRecieve","filter","Active","Completed","normalizedQuery","toLowerCase","trim","includes","filterTodos","event","prevState","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.599d934c.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n}\n\nexport const TodoListItem: React.FC<Props> = ({\n  todo,\n  onSelect,\n  selectedTodo,\n}) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{id}</td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelect(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames({\n                'far fa-eye-slash': selectedTodo?.id === todo.id,\n                'far fa-eye': selectedTodo?.id !== todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoListItem } from '../TodoListItem/TodoListItem';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n\n        <th>Title</th>\n\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <TodoListItem\n          todo={todo}\n          key={todo.id}\n          onSelect={onSelect}\n          selectedTodo={selectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  query: string;\n  onSearch: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onTypeChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  onReset: () => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSearch,\n  query,\n  onTypeChange,\n  onReset,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          defaultValue={FilterType.All}\n          onChange={onTypeChange}\n        >\n          {Object.values(FilterType).map(type => (\n            <option\n              value={type}\n              key={type}\n            >\n              {type}\n            </option>\n          ))}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={onSearch}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {Boolean(query) && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onReset}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return fetch(fullURL)\n    .catch((error) => {\n      throw error;\n    })\n    .then(res => res.json())\n    .then(data => wait(300).then(() => data));\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [isUserLoading, setIsUserLoading] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n    getUser(todo.userId)\n      .then(user => {\n        setCurrentUser(user);\n      })\n      .catch((error) => {\n        throw error;\n      })\n      .finally(() => setIsUserLoading(false));\n  }, []);\n\n  const { title, completed, id } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${currentUser?.email}`}>\n                {currentUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FilterOptions } from './types/FilterOptions';\nimport { FilterType } from './types/FilterType';\n\nexport const DEFAULT_FILTER: FilterOptions = {\n  query: '',\n  filterType: FilterType.All,\n};\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { filterTodos } from './helpers';\nimport { FilterOptions } from './types/FilterOptions';\nimport { DEFAULT_FILTER } from './constants';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isTodosLoading, setIsTodosLoading] = useState(false);\n  const [filterOptions, setFilterOptions] = useState<FilterOptions>(\n    DEFAULT_FILTER,\n  );\n\n  const visibleTodos = useMemo(() => {\n    return filterTodos(todos, filterOptions);\n  }, [filterOptions, todos]);\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch((error) => {\n        throw error;\n      })\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  const handleFilterTypeChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setFilterOptions((prevState) => ({\n      ...prevState,\n      filterType: event.target.value as FilterType,\n    }));\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterOptions((prevState) => ({\n      ...prevState,\n      query: event.target.value,\n    }));\n  };\n\n  const handleResetInput = () => {\n    setFilterOptions((prevState) => ({\n      ...prevState,\n      query: '',\n    }));\n  };\n\n  const handleTodoSelection = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleModalClosing = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSearch={handleInputChange}\n                onTypeChange={handleFilterTypeChange}\n                onReset={handleResetInput}\n                query={filterOptions.query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isTodosLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  onSelect={handleTodoSelection}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} onClose={handleModalClosing} />\n      )}\n    </>\n  );\n};\n","import { FilterOptions } from './types/FilterOptions';\nimport { FilterType } from './types/FilterType';\nimport { Todo } from './types/Todo';\n\nexport function filterTodos(\n  todos: Todo[],\n  { query, filterType }: FilterOptions,\n) {\n  let todoToRecieve = [...todos].filter(({ completed }) => {\n    switch (filterType) {\n      case FilterType.Active: {\n        return completed === false;\n      }\n\n      case FilterType.Completed: {\n        return completed === true;\n      }\n\n      case FilterType.All:\n      default: {\n        return true;\n      }\n    }\n  });\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    todoToRecieve = todoToRecieve.filter(({ title }) => {\n      const normalizedTodoTitle = title.toLowerCase();\n\n      return normalizedTodoTitle.includes(normalizedQuery);\n    });\n  }\n\n  return todoToRecieve;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}